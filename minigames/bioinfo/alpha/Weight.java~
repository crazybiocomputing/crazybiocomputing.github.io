
import java.awt.*;
import java.awt.geom.*;
import java.applet.*;
import java.awt.event.*;
import java.io.InputStream;
import javax.swing.JFrame;

// These classes are for Url's.
import java.net.*;

public class Weight extends Applet 
   implements KeyListener, MouseMotionListener, MouseListener {

    Thread animator;
	
     // Your image name;
     Image my_background;
     Image img1, img2; // OK Button
     Image img0; // TextField
     
     CrazyOKButton my_button;
     CrazySpinButton digit100;
     CrazySpinButton digit10;
     CrazySpinButton digit1;
     CrazySpinButton digit10th;
     CrazySpinButton digit100th;

 // The applet base URL
     URL base;


     int x, y;
     Font ttf_font;


     // The object we will use to write with instead of the standard screen graphics
     Graphics bufferGraphics;
     // The image that will contain everything that has been drawn on
     // bufferGraphics.
     Image offscreen;
     // To get the width and height of the applet.
     Dimension dim;
	
     public void loadImages() 
     {
          // This object will allow you to control loading
          MediaTracker mt;

          // initialize the MediaTracker
          mt = new MediaTracker(this);

          // The try-catch is necessary when the URL isn't valid
          // Ofcourse this one is valid, since it is generated by
          // Java itself.

          try {
               // getDocumentbase gets the applet path.
               base = getCodeBase();
          }
          catch (Exception e) {}

          // Here we load the image.
          // Only Gif and JPG are allowed. Transparent gif also.
          my_background = getImage(base,"weight.png");
          img0 = getImage(base,"textfield.png");
          img1 = getImage(base,"ok_button.png");
          img2 = getImage(base,"ok_pushed_button.png");

          // tell the MediaTracker to keep an eye on this image, and give it ID 1;
          mt.addImage(my_background,1);
          mt.addImage(img0,2);
          mt.addImage(img1,3);
          mt.addImage(img2,4);
          // now tell the mediaTracker to stop the applet execution
          // (in this example don't paint) until the images are fully loaded.
          // must be in a try catch block.

         try {
               mt.waitForAll();
          }
          catch (InterruptedException  e) {}
     
     }
     
     
     public void init() 
     {
          // We'll ask the width and height by this
          dim = getSize();

          loadImages();
          // when the applet gets here then the images is loaded.
      x = 100;
      y = 100;
      
      try {
      URL fontURL = new URL(base,"./data/Alien-Encounters-Regular.ttf");

      InputStream ttFontStream = fontURL.openStream();
      ttf_font = Font.createFont(Font.TRUETYPE_FONT, ttFontStream );
      ttf_font =  ttf_font.deriveFont(Font.PLAIN,50);
      setFont(ttf_font );
      ttFontStream.close();
	} catch ( Exception e ) {}
	
          // Create CrazyWidgets
          my_button = new CrazyOKButton(450,390,473 ,400);
	  my_button.setSkin(img1,img2);
	
          digit100   = new CrazySpinButton(240,400 - 17,260 ,363 );
          digit10    = new CrazySpinButton(280,400 - 17,260 ,363 );
          digit1     = new CrazySpinButton(320,400 - 17,260 ,363 );
          digit10th  = new CrazySpinButton(370,400 - 17,260 ,363 );
          digit100th = new CrazySpinButton(410,400 - 17,260 ,363 );
	  
	addKeyListener(this);
	addMouseListener(this);	
          addMouseMotionListener(this);

          // Create an offscreen image to draw on
          // Make it the size of the applet, this is just perfect larger
          // size could slow it down unnecessary.
          offscreen = createImage(dim.width,dim.height);
          // by doing this everything that is drawn by bufferGraphics
          // will be written on the offscreen image.
          bufferGraphics = offscreen.getGraphics();
	  	  
     }
     
     
     
     // Always required for good double-buffering.
     // This will cause the applet not to first wipe off
     // previous drawings but to immediately repaint.
     // the wiping off also causes flickering.
     // Update is called automatically when repaint() is called.

     public void update(Graphics g)
     {
          paint(g);
     }
 
     public void paint(Graphics g) 
     {
          // Wipe off everything that has been drawn before
          // Otherwise previous drawings would also be displayed.
          bufferGraphics.clearRect(0,0,dim.width,dim.width);

          // draw the rect at the current mouse position
          // to the offscreen image
          bufferGraphics.setColor(Color.white);
          bufferGraphics.fillRect(0,0,(int) getSize().getWidth(),(int) getSize().getHeight());

          bufferGraphics.setColor(Color.black);
	  // Draw crazy widget(s) 
          bufferGraphics.drawImage(my_background,70,15, this);

          my_button.paint(bufferGraphics);
//          answer.paint(bufferGraphics);
          digit100.paint(bufferGraphics);
          digit10.paint(bufferGraphics);
          digit1.paint(bufferGraphics);
          digit10th.paint(bufferGraphics);
          digit100th.paint(bufferGraphics);

          // draw the offscreen image to the screen like a normal image.
          // Since offscreen is the screen width we start at 0,0.
          g.drawImage(offscreen,0,0,this);
	  
     }

   public void keyPressed( KeyEvent e ) { }
   public void keyReleased( KeyEvent e ) { 
         int keyCode = e.getKeyCode();
	      repaint();
      e.consume();

}
   public void keyTyped( KeyEvent e ) { }

   public void mouseEntered( MouseEvent e ) { }
   public void mouseExited( MouseEvent e ) { }
   public void mousePressed( MouseEvent e ) { 
        if (my_button.isActive(e.getX(),e.getY()))
      	     my_button.mousePressed(e);       
	else if (digit100.isActive(e.getX(),e.getY()))
   	     digit100.mousePressed(e);   
	else if (digit10.isActive(e.getX(),e.getY()))
   	     digit10.mousePressed(e);   
	else if (digit1.isActive(e.getX(),e.getY()))
   	     digit1.mousePressed(e);   
	else if (digit10th.isActive(e.getX(),e.getY()))
   	     digit10th.mousePressed(e);   
	else if (digit100th.isActive(e.getX(),e.getY()))
   	     digit100th.mousePressed(e);   
	else {
	     // do nothing;
	}      
	repaint();
}
   public void mouseReleased( MouseEvent e ) { 
        if (my_button.isActive(e.getX(),e.getY())) {
      	    my_button.mouseReleased(e); 
	    float answer = digit100.getDigit()   * 100.0f+   
	                   digit10.getDigit()    * 10.0f +   
	                   digit1.getDigit()     * 1.0f  +   
	                   digit10th.getDigit()  * 0.1f  +   
	                   digit100th.getDigit() * 0.01f; 
            System.out.println("answer ... " + answer); 
            if (answer == 909.95f) 
	    	gotoNextPage();
	    else
	        gotoBadPage();
		       
	}
      	    digit100.mouseReleased(e);     
      	    digit10.mouseReleased(e);     
      	    digit1.mouseReleased(e);     
      	    digit10th.mouseReleased(e);     
      	    digit100th.mouseReleased(e);     
	repaint();
}
   public void mouseClicked( MouseEvent e ) { }

     // Save the current mouse position to paint a rectangle there.
     // and request a repaint()
     public void mouseMoved(MouseEvent evt) 
     {
     }
 

     // The necessary methods.
     public void mouseDragged(MouseEvent evt) 
     {
          repaint();
     }
     
     void gotoNextPage() {
	try {
		System.out.println(getCodeBase() + "good_answer.html");
		this.getAppletContext().showDocument(new URL(getCodeBase(),"./fatslim.html") );
	}
	catch (MalformedURLException url_e) {}
     
     }

     void gotoBadPage() {
	try {
		System.out.println(getCodeBase() + "bad_answer.html");
		this.getAppletContext().showDocument(new URL(getCodeBase(),"../bad.html") );
	}
	catch (MalformedURLException url_e) {}
     
     }


} // end of class Weight

