
import java.awt.*;
import java.awt.geom.*;
import java.applet.*;
import java.awt.event.*;
import java.io.InputStream;
import javax.swing.JFrame;
import java.util.Random;

// These classes are for Url's.
import java.net.*;

public class Last extends CrazyApplet {

    Thread animator;
	
     // Your image name;
     Image my_background;
     Image imgs[]; // CrazyHoveringFrame
     
     CrazyOKButton OKButton;
     CrazyTextField text;

 // The applet base URL
     URL base;


     int x, y;
     Font ttf_font;


     // The object we will use to write with instead of the standard screen graphics
     Graphics bufferGraphics;
     // The image that will contain everything that has been drawn on
     // bufferGraphics.
     Image offscreen;
     // To get the width and height of the applet.
     Dimension dim;
	
	public void loadImages() 
	{
		// This object will allow you to control loading
		MediaTracker mt;

          // initialize the MediaTracker
          mt = new MediaTracker(this);

          // The try-catch is necessary when the URL isn't valid
          // Ofcourse this one is valid, since it is generated by
          // Java itself.

          try {
               // getDocumentbase gets the applet path.
               base = getCodeBase();
          }
          catch (Exception e) {}

          // Here we load the image(s).
		  // First, background image
          my_background = getImage(base,"background.png");
		// Second, other images for various widgets

		String names[] = {
				"OKbutton",
				"pushButton",
		};
	  imgs = new Image[names.length];
	  for (int i = 0; i < names.length; i++) 
	  	imgs[i] = getImage(base,names[i] + ".png");

	  
          // tell the MediaTracker to keep an eye on this image, and give it ID 1;
          mt.addImage(my_background,1);

		for (int i = 0; i < names.length; i++) 
	  	mt.addImage(imgs[i],1 + i);
 


		// now tell the mediaTracker to stop the applet execution
		// (in this example don't paint) until the images are fully loaded.
		// must be in a try catch block.

		try {
			mt.waitForAll();
		}
		catch (InterruptedException  e) {}
		    
		try {
			// URL fontURL = new URL(base,"./hline.ttf");

			// InputStream ttFontStream = fontURL.openStream();
			ttf_font = new Font(null);
			// Font.createFont(Font.TRUETYPE_FONT, ttFontStream );
			ttf_font =  ttf_font.deriveFont(Font.PLAIN,14);
			setFont(ttf_font );
			// ttFontStream.close();
		} catch ( Exception e ) {}
	}

     
     
	public void create_widgets() 
		{			
			setBackground(my_background);
			text = new CrazyTextField(150, 412, 227, 426);
			add(text);
			
			OKButton = new CrazyOKButton(312,411);
			OKButton.setSkin(imgs[0],imgs[1]);
			add(OKButton);
						
			setGoodPath("catorce.html");
			setBadPath("../bad.html");

		}
    
	void doActionWhenMouseReleased() 
		{
			if (activeWidget != null) {
			switch (activeWidget.getID()) {
			case 1:  // text
				break;
			case 2:  // okbutton 
				if (text.getString().equals("1356")) gotoNextPage(); else gotoBadPage();
				break;
			default:
				// Do nothing
			}
			}
		}
		       

    
} // end of class Last

